<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>
CS112 Spring 2018: Expression Evaluation
</title>
<style>
body { font: 14px Lato, Trebuchet MS, Verdana, Arial, Helvetica, sans-serif; }
div.code { background: lightgrey; width: 50%; padding: 3px; }
table { border-collapse: collapse; cellspacing: 0px; margin-left: 10%;}
th { font: bold 14px Trebuchet MS; border-bottom: 1px solid black; padding: 10px;}
td { padding: 2px; font: 13px Trebuchet MS; }
td.pts { text-align: left; padding-left: 30px; }
tt,pre { color: blue; }
a, a:visited { color: blue; }
</style>
</head>

<body>
<center>
<h2>Programming Assignment 2</h2>
<h2>Expression Evaluation</h2>
<h4>
In this assignment you will implement a program to evaluate an arithmetic 
expression
</h4>

<h3>Worth 80 points (8% of course grade)</h3>
<h3>Posted Sat, Feb 10
</h3><h3>Due Tue, Feb 27, 11:00 PM (<font color="red">WARNING!! NO GRACE PERIOD</font>)
</h3><h3>Extended deadline (with ONE time free extension pass): Fri, Mar 2, 11:00 PM 
(<font color="red">NO GRACE PERIOD</font>)
</h3></center>
<p>You get ONE free extension pass for assignments during
the semester, no questions asked. There will be a total
of 5 assignments this semester, and you may use this one free extension pass for any of
the 5 assignments.<br>
</p><p><font color="red">A separate Sakai assignment will be opened for extensions 
AFTER the deadline for the regular submission has passed. The extension
will be 3 days (72 hours).
If/when you choose to use the one-time extension,
you don't need to ask for permission - just drop your submission in the 
extension assignment. And you can do this even if you dropped something in
the regular submission, and later on decided to use the extension - in this
case, only the extension submission will be graded, the regular submission will be 
ignored.</font>

</p><hr>

<ul>
<li>You will work <b>individually</b> on this assignment. Read the
<a href="http://www.cs.rutgers.edu/academic-integrity/programming-assignments">
DCS Academic Integrity Policy for Programming Assignments</a> - you are responsible
for this. In particular, note that <b>"All Violations of the Academic
Integrity Policy will be reported by the instructor to the appropriate Dean".</b>


</li><li><h3>IMPORTANT - READ THE FOLLOWING CAREFULLY!!!</h3>

<p><font color="red">Assignments emailed to the instructor or TAs will
be ignored--they will NOT be accepted for grading. <br>
We will only grade submissions in Sakai.</font><br>

</p><p><font color="red">If your program does not compile, you will not get any credit.</font> 

</p><p>Most compilation errors occur for two reasons: 
</p><ol>
<li> You 
are programming outside Eclipse, and you delete the "package" statement at the top of the file. 
If you do this, you are changing the program structure, and it will not compile when we
test it.
</li><li> You make some last minute 
changes, and submit without compiling. 
</li></ol>

<h3>To avoid these issues, (a) START EARLY, and
give yourself plenty of time to work through the assignment, and (b) Submit a version well
before the deadline so there is at least something in Sakai for us to grade. And you can
keep submitting later versions (up to 10) - we will 
accept the LATEST version.</h3>
</li></ul>

<hr>
<p>
</p><ul>
<li><a href="#expr">Expressions</a>
</li><li><a href="#impl">Implementation and Grading</a>
</li><li><a href="#running">Running the evaluator</a>
</li><li><a href="#submission">Submission</a>
</li><li><a href="#faq">FAQ - IMPORTANT!!! READ BEFORE ASKING QUESTIONS!!</a>
</li></ul>

<hr>

<a name="expr"></a><h3>Expressions</h3>

Here are some sample expressions of the kind your program will evaluate:

<pre>   3
   Xyz
   3-4*5
   a-(b+A[B[2]])*d+3
   A[2*(a+b)]
   (varx + vary*varz[(vara+varb[(a+b)*33])])/55
</pre>

The expressions will be restricted to the following components:
<ul>
  <li>Integer constants
  </li><li>Simple (non-array) variables with integer values
  </li><li>Arrays of integers, indexed with a constant or a subexpression
  </li><li>Addition, subtraction, multiplication, and division operators, i.e.
<tt>'+','-','*','/'</tt>
  </li><li>Parenthesized subexpressions
</li></ul>

Note the following:
<ul>
  <li>Subexpressions (including indexes into arrays between '[' and ']') may be
nested to any level
  </li><li>Multiplication and division have higher precedence than addition
  and subtraction
  </li><li>Variable names (either simple variables or arrays) will be made up of one or more
letters ONLY (nothing but letters a-z and A-Z), are case sensitive (Xyz is different from xyz) and 
will be unique.
</li><li> Integer constants may have multiple digits
</li><li>There may any number of spaces or tabs between any pair of tokens in the 
expression. Tokens are variable names, constants, parentheses, square brackets, and
operators.
</li></ul>

<p></p><hr>
<a name="impl"></a><h3>Implementation and Grading</h3>

<p>Download the attached <tt>expression_project.zip</tt> file to your
computer. DO NOT unzip it. Instead, follow the instructions on the Eclipse page 
under the section "Importing a Zipped Project into Eclipse" to get the entire
project into your Eclipse workspace.

</p><p>You will see a project called <tt>Expression Evaluation</tt> with 
the following classes in package <tt>app</tt>:
</p><ul>
<li><tt>Variable</tt><br>
This class represents a simple variable with a single value. Your implementation
will create one <tt>Variable</tt> object for every simple variable in the expression
(even if there are multiple occurrences of the same variable).
You don't have to implement anything in this class, so <b>do not make any changes 
to it.</b> 
<p></p></li><li><tt>Array</tt><br>
This class represents an array of integer values. 
Your implementation will create one <tt>Array</tt> object for every array
in the expression (even if there are multiple occurrences of the same array).
You don't have to implement anything in this class, so <b>do not make any changes 
to it.</b> 
<p></p></li><li><tt>Expression</tt><br>
This class consists of methods for various steps of 
the evaluation process:
<ol>
<p></p><li><b>20 pts</b>: <tt>makeVariableLists</tt> - This method populates
the <tt>vars</tt> and <tt>arrays</tt> lists
with <tt>Variable</tt> and <tt>Array</tt> objects, respectively,
for the simple variable and arrays that appear in the expression. <br>
<font color="red">You will fill in the implementation of this method. Make
sure to read the comments above the method header to get more details.</font>
<p></p></li><li><tt>loadVariableValues</tt> - This method reads values for all simple
variables and arrays arrays from a file, into the <tt>Variable</tt> and <tt>Array</tt> 
objects
stored in the <tt>vars</tt> and <tt>arrays</tt> array lists. This method is
already implemented, <b>do not make any changes</b>.
</li><li><p><b>60 pts</b>: <tt>evaluate</tt> - This method evaluates the expression.<br>
<font color="red">You will fill in the implementation of this method.</font>
</p></li></ol>

</li><li><p><tt>Evaluator</tt>, the application driver, which calls methods in <tt>Expression</tt>. You may use this to test your implementation. There are two sample test files 
<tt>etest1.txt</tt> and <tt>etest2.txt</tt>,
appearing directly under the project folder.

</p></li></ul>
You are also given the following class in package <tt>structures</tt>:
<ul>
 <li><tt>Stack</tt>, to be (optionally) used in the evaluation process
</li></ul> 

<p>Do not add any other classes. In particular, if you wish to use stacks
in your evaluation implementation <font color="red">do NOT
use your own stack class, ONLY use the one you are given.</font> The reason is,
we will be using this same <tt>Stack</tt> class when we test your implementation.

</p><p>&nbsp;</p><p><b>Notes on tokenizing the expression</b>

</p><p>You will need to separate out ("tokenize") the components of the
expression in <tt>makeVariableLists</tt> and <tt>evaluate</tt>. 
Tokens include operands (variables and constants), operators
(<tt>'+','-','*','/'</tt>), parentheses and square brackets.

</p><p>It may be helpful (but you are not required) to use 
<tt>java.util.StringTokenizer</tt> to tokenize the expression.
The <tt>delims</tt> field in the <tt>Expression</tt> class may be
used in the tokenizing process.

</p><p>The <a href="https://docs.oracle.com/javase/8/docs/api/java/util/StringTokenizer.html">
documentation</a> of the <tt>StringTokenizer</tt> class says this:
</p><ul>
"<tt>StringTokenizer</tt> is a legacy class that is retained for compatibility 
reasons although its use is discouraged in new code. It is recommended that 
anyone seeking this functionality use the split method of 
<tt>String</tt> or the <tt>java.util.regex</tt> package instead."
</ul>

<p>For the purpose of this assignment, you may use <tt>StringTokenizer</tt>
without issue. Alternatively, you may use the <tt>split</tt> method of the
<tt>String</tt> class, or the <tt>Pattern</tt> and <tt>Matcher</tt>
classes in the package <tt>java.util.regex</tt>. 

</p><p>Or, you may simply parse the expression by scanning it a character
at a time.

</p><p>&nbsp;</p><p><b>Rules while working on <tt>Expression.java</tt></b>:
</p><ul>
<li>You may NOT add any <tt>import</tt> statements to the file. <br>
Note that
the <tt>java.io.*</tt>, <tt>java.util.*</tt>, and <tt>java.util.regex.*</tt>
import statements at the
top of the file allow for using ANY class in <tt>java.io</tt>, <tt>java.util</tt>,
and <tt>java.util.regex</tt> without additional specification or qualification.
</li><li>You may NOT add any fields to the <tt>Expression</tt> class.
</li><li>You may NOT modify the headers of any of the given methods.
</li><li>You may NOT delete any methods.
</li><li>You MAY add helper methods if needed, as long as you make them <tt>private</tt>. (Including the recursive <tt>evaluate</tt> method discussed below.)
</li></ul>

<p>&nbsp;</p><p><b>Guidelines and recommendations for implementing <tt>evaluate</tt></b>

</p><ul>
<li>Recursion (optional) for sub-expressions in parentheses

<p><font color="red">While recursion is optional for this assignment, 
using it to evaluate subexpressions
will make it a LOT easier to write working code. (This is a great
opportunity to learn how to use recursion in a realistic situation!!)</font>

</p><p>There are a couple of coding options if you want to use recursion:

</p><ul>
<p></p><li>One option is to make the <tt>public evaluate</tt> method itself
recursive.

<p>So, for instance, if the main expression is
</p><pre>a-(b+A[B[2]])*d+3

01234567891111111  (these are the positions of the chracters in the expression)
          0123456
</pre>
then, to recursively evaluate the subexpression in parentheses, you may
call the recursive evaluate method like this:
<pre>  float res = evaluate(expr.substring(3,11), vars, arrays);
</pre>

<p></p></li><li>Another option is to write a separate
<font color="red">private</font> recursive evaluate method, with
two indexes that mark the start and end of the subexpression in the main expression.
Then, for the above example, you can call the recursive method like this:
<pre>   float res = evaluate(expr, 3, 11, vars, arrays);
</pre>
(The <tt>expr</tt> parameter is the original expression for every call.)

<p>And, to start with, you may call the recursive evaluate method
from the public <tt>evaluate</tt> method like this:
</p><pre>   return evaluate(expr, 0, expr.length()-1, vars, arrays);
</pre>
which is the entire expression.

<p>You will need to use this second option
if you want to include other parameters in your recursive evaluate.
</p></li></ul>
<p>In either case, the auto grader will call the <tt>public evaluate</tt> method.

</p><p></p></li><li>Recursion (optional) for array index expressions (within '[ and ']'), 
using the same approach as above.

<p></p></li><li>A stack may be used to store the values of operands as well as the
results from evaluating subexpressions - see next point. 
<p></p></li><li>Since <tt>*</tt> and <tt>/</tt> have precedence over <tt>+</tt> and
<tt>-</tt>, it would help to store operators in another stack. (Think
of how you would evaluate <tt>a+b*c</tt> with operands/intermediate results
on one stack and operators on the other.) 

<p></p></li><li>When you implement the <tt>evaluate</tt> method, you may want to test as
you go, implementing code for and testing simple expressions, then building up
to more complex expressions. The following is an example sequence of 
the kinds of expressions you may want to build with:
<ul>
<li><tt>3</tt>
</li><li><tt>a</tt>
</li><li><tt>3+4</tt>
</li><li><tt>a+b</tt>
</li><li><tt>3+4*5</tt>
</li><li><tt>a+b*c</tt>
</li><li>Then introduce parentheses
</li><li>Then try nested parentheses
</li><li>Then introduce array subscripts, but no parentheses
</li><li>Then try nested subscripts, but no parentheses
</li><li>Then try using parentheses as well as array subscripts
</li><li>Then try mixing arrays within parentheses, parentheses within array
subscripts, etc.
</li></ul>
</li></ul>

<p>&nbsp;</p><p><b>Correctness of expression and input files</b>
</p><ul>
<p></p><li>All input expressions will be correctly formatted
</li><li>All input files with values for variables and arrays
will be correctly formatted, and will be guaranteed to 
have values for all variables in the expression that is being evaluated
</li></ul>
So you don't need to do any checking for correctness of 
inputs in any of the methods.

<p></p><hr>
<a name="running"></a><h3>Running the evaluator</h3>

<p>You can test your implementation by running the <tt>Evaluator</tt> driver
on various expressions and input variable values file. 

</p><p>When creating your
own variable values files for testing, make sure they are directly
under the project folder, alongside <tt>etest1.txt</tt> and <tt>etest2.txt</tt>.

</p><p>Since you are not going to turn in the
<tt>Evaluator.java</tt> file, you may introduce debugging statements and
other methods (such as printing out the variables or arrays array lists) 
as needed.

</p><h4>No variables</h4>

<pre>   Enter the expression, or hit return to quit =&gt; 3
   Enter variable values file name, or hit return if no variables =&gt; 
   Value of expression = 3.0

   Enter the expression, or hit return to quit =&gt; 3-4*5
   Enter variable values file name, or hit return if no variables =&gt; 
   Value of expression = -17.0

   Enter the expression, or hit return to quit =&gt; 
</pre>
Neither of the expressions above have variables, so just hit return
when asked for the variable values file name.

<h4>Variables, values loaded from file</h4>

<pre>  Enter the expression, or hit return to quit =&gt; a
  Enter variable values file name, or hit return if no variables =&gt; etest1.txt
  Value of expression = 3.0

  Enter the expression, or hit return to quit =&gt; 
</pre>
Since the expression has a variable, <tt>a</tt>, the evaluator needs to be supplied with
a file that has a value for it. Here's what 
<tt>etest1.txt</tt> looks like:
<pre>  a 3
  b 2
  A 5 (2,3) (4,5)
  B 3 (2,1)
  d 56
</pre>
Each line of the file begins with a variable name.  For simple variables, the
name is followed by the variable's integer value.  For arrays,
the name is followed by the array's length, which is followed by
a series of (index,integer value) pairs. 

<p><font color="red">Note: The index and integer value
pairs must be written with no spaces around the index or integer value.<br>
So, for instance, <tt>(2, 3)</tt> or <tt>( 2,3)</tt> or <tt>(2 ,3)</tt> are all incorrect.<br>
Make sure you
adhere to this requirement when you create your own input files for testing.</font>

</p><p>If the value at a particular array index is not explicitly listed, it is set to 0 by default.

</p><p>So, in the example above, <tt>A = [0,0,3,0,5]</tt> and <tt>B = [0,0,1]</tt>

</p><p>Note that the variable values file can have values for any number of variables,
so that it can be used as input for several expressions that contain one or
more of the variables in the file.

</p><p>Here are a couple more evaluations of expressions for which the variable values are 
loaded from <tt>etest1.txt</tt>:

</p><pre>  Enter the expression, or hit return to quit =&gt; (a + A[a*2-b])
  Enter variable values file name, or hit return if no variables =&gt; etest1.txt
  Value of expression = 8.0

  Enter the expression, or hit return to quit =&gt; a - (b+A[B[2]])*d + 3
  Enter variable values file name, or hit return if no variables =&gt; etest1.txt
  Value of expression = -106.0

  Enter the expression, or hit return to quit =&gt;
</pre>

For a change of pace, here's <tt>etest2.txt</tt>, which has
the following variables and values:
<pre>  varx 6
  vary 5
  arrayA 10 (3,5) (8,12) (9,1)
</pre>
And here are evaluations using this file:
<pre>  
  Enter the expression, or hit return to quit =&gt; arrayA[arrayA[9]*(arrayA[3]+2)+1]-varx
  Enter variable values file name, or hit return if no variables =&gt; etest2.txt
  Value of expression = 6.0

  Enter the expression, or hit return to quit =&gt;
</pre>

<p></p><hr>
<a name="submission"></a><h3>Submission</h3>

Submit your <b>Expression.java</b> file ONLY.

<p></p><hr>
<a name="faq"></a><h3>Frequently Asked Questions</h3>

<b>Q: Are array names all uppercase?</b>

<p>A:  No. Arrays could have lower case letters in their names. You can 
tell if a variable is an array if it is followed by an opening square 
bracket. See, for example, the last example in the "Expression" section,
 in which <tt>varb</tt> and <tt>varz</tt> are arrays:

</p><pre>(varx + vary*varz[(vara+varb[(a+b)*33])])/55
</pre>

<p><b>Q: Can we delete spaces from the expression?</b>
</p><p>A: Sure.

</p><p><b>Q: Will the expression contain negative numbers?</b>

</p><p>A: No. The expression will NOT have things like <tt>a*-3</tt> or <tt>x+(-y)</tt>. 
It will ONLY have the BINARY
operators +, -, /, and *. In other words, each of these operators will need two values (operands)
to work on. (The <tt>-</tt> in front of <tt>3</tt> in 
<tt>a*-3</tt> is called a UNARY minus. UNARY operators will NOT
appear in the input expression.)

</p><p>However, it is possible that in the process of evaluating the expression, you come
across negative values, either because they appear in the input file, or because
they are the result of evaluation. For instance, when evaluating 
<tt>a+b</tt>, <tt>a=6</tt> and <tt>b=-9</tt> as input
values, and a result of <tt>-3</tt> is a perfectly legitimate scenario. 

</p><p><b>Q: What if an array index evaluates to a non-integer such as 5/2?</b>

</p><p>A: Truncate it and use the resulting integer as the index.

</p><p><b>Q: Could an array index evaluate to a negative integer?</b>

</p><p>A: No, you will not be given any input expression or values that would result in a negative 
integer value for an array index. In other words, you will not need to account for 
this situation in your code.

</p><p><b>Q: Could an array name be the same as a simple variable?</b>

</p><p>A: No. All variable names, for both simple variables and arrays, are unique.

</p><p><b>Q: Should the expression "()" be reported as an error?</b>

</p><p>A: You don't have to do any error checking on the legality of the expression in the 
<tt>makeVariableLists</tt> or <tt>evaluate</tt> methods. When these methods are called, 
you may assume that the expression is correctly constructed. Which means you will not 
encounter an expression without at least one constant or variable, and all parens and 
brackets will be correctly formatted. 

</p><p><b>Q: Can I convert the expression to postfix, then evaluate the postfix expression?</b>

</p><p>A: NO!!! You have to work with the given traditional/infix form of the expression.

</p>
</body></html>