<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>
CS112 Spring 2018: Programming Assignment 1 - Polynomial
</title>
<style>
body { font: 14px Trebuchet MS, Verdana, Arial, Helvetica, sans-serif;}
div.code { background: lightgrey; }
table { border-collapse: collapse; cellspacing: 0px; margin-left: 10%;}
th { font: bold 14px Trebuchet MS; border-bottom: 1px solid black; padding: 10px;}
td { padding: 2px; font: 13px Trebuchet MS; }
td.pts { text-align: left; padding-left: 30px; }
a, a:visited { color: blue; }
tt,pre { color: blue; }
</style>
</head><body>

<center>
<h2>Programming Assignment 1</h2>
<h2>Polynomial</h2>
<h3>In this assignment, you will implement a polynomial and operations on it using 
a linked list.</h3>
<h3>Worth 60 points (6% of course grade)</h3>
<h3>Posted Fri, Jan 26
</h3><h3>Due Fri, Feb 9, 11:00 PM (<font color="red">WARNING!! NO GRACE PERIOD</font>).
</h3><h3>Extended deadline (with ONE time free extension pass): Mon, Feb 12, 11:00 PM 
(<font color="red">NO GRACE PERIOD</font>)
</h3></center>
<p>You get ONE free extension pass for assignments during
the semester, no questions asked. There will be a total
of 5 assignments, and you may use this one free extension pass for any of
the 5 assignments. <br>
</p><p><font color="red">A separate Sakai assignment will be opened for extensions 
AFTER the deadline for the regular submission has passed. The extension
will be 3 days (72 hours).
If/when you choose to use the one-time extension,
you don't need to ask for permission - just drop your submission in the 
extension assignment. And you can do this even if you dropped something in
the regular submission, and later on decided to use the extension - in this
case, only the extension submission will be graded, the regular submission will be 
ignored.
</font>


</p><hr>

<ul>
<li>You will work <b>individually</b> on this assignment. Read the
<a href="http://www.cs.rutgers.edu/academic-integrity/programming-assignments">
DCS Academic Integrity Policy for Programming Assignments</a> - you are responsible
for this. In particular, note that <b>"All Violations of the Academic
Integrity Policy will be reported by the instructor to the appropriate Dean".</b>

</li><li><h3>IMPORTANT - READ THE FOLLOWING CAREFULLY!!!</h3>

<p><font color="red">Assignments emailed to the instructor/TAs/graders will
be ignored--they will NOT be accepted for grading. <br>
We will only grade submissions in Sakai.</font><br>

</p><p><font color="red">If your program does not compile, you will not get any credit.</font> 

</p><p>Most compilation errors occur for two reasons: 
</p><ol>
<li> You 
are programming outside Eclipse, and you delete the "package" statement at the top of the file. 
If you do this, you are changing the program structure, and it will not compile when we
test it.
</li><li> You make some last minute 
changes, and submit without compiling. 
</li></ol>

<h3>To avoid these issues, (a) START EARLY, and
give yourself plenty of time to work through the assignment, and (b) Submit a version well
before the deadline so there is at least something in Sakai for us to grade. And you can
keep submitting later versions (up to 10) - we will 
accept the LATEST version.</h3>
</li></ul>

<hr><p>
</p><ul>
<li><a href="#background">Background</a>
</li><li><a href="#impl">Implementation and Grading</a>
</li><li><a href="#running">Running the Program</a>
</li><li><a href="#submission">Submission</a>
</li><li><a href="#grading">Grading Process</a>
</li></ul>

<hr>

<p><a name="background"></a></p><h3>Background</h3>
Read Section 3.1 in the textbook for background on polynomials and polynomial 
arithmetic.<p>

A polynomial may be represented using a linked list as follows:
for every term in the polynomial there is one entry in the 
linked list consisting of the term's coefficient and degree.
The entries are ordered according to ASCENDING values of degree, i.e. lowest degree
term first, then next lowest degree term and so on, all the way up to the highest degree
term. IMPORTANT: Zero-coefficient terms are NOT stored.</p><p>

For example, the following polynomial (the symbol '^' is used to 
mean 'raised to the power'):
</p><pre>      4x^5 - 2x^3 + 2x +3
</pre>
can be represented as the linked list of terms:
<pre>      (3,0) -&gt; (2,1) -&gt; (-2,3) -&gt; (4,5)
</pre>
where each term is a (coefficient,degree) pair.<p>

Notes about representation:
</p><ul>
<li> Terms are stored in ASCENDING order of degrees from front to 
rear in a non-circular linked list. 
</li><li> Zero-coefficient terms are NOT stored.
</li><li><font color="red">An EMPTY (zero) polynomial is represented by a linked list with NO 
NODES in it, i.e. referenced by NULL.</font>
</li><li>Coefficients are floating point numbers
</li><li>Degrees are POSITIVE integers,
except if there is a constant term, in which case the degree is zero.
</li><li>There will not be more than one term in the same degree. 
</li></ul>
<font color="red"><b>If you do not represent all your polynomials (the initial inputs
as well as those you get out of doing arithmetic on polynomials) as above, you
will lose credit even if your results are mathematically correct.</b></font>

<p></p><hr>

<p><a name="impl"></a></p><h3>Implementation and Grading</h3>

<p>Download the attached <tt>polynomial_project.zip</tt> file to your
computer. DO NOT unzip it. Instead, follow the instructions on the Eclipse page 
under the section "Importing a Zipped Project into Eclipse" to get the entire
project into your Eclipse workspace.

</p><p>You will see a project called <tt>Polynomial</tt> with 
the following classes in package <tt>poly</tt>:
</p><ul>
<li><tt>Node</tt>
</li><li><tt>Term</tt>
</li><li><tt>Polynomial</tt>
</li><li><tt>Polytest</tt>
</li></ul>

<p>(Aside from these, there are also three sample input files, described in
the <b>Running the Program</b> section below.)

</p><p>You need to complete the implementation of
the <tt>Polynomial</tt> class where indicated in the
following methods:

<table>
<tbody><tr><th>Method</th><th>Grading Points</th></tr>
<tr><td><tt>evaluate</tt></td><td class="pts">10</td></tr><tr>
</tr><tr><td><tt>add</tt></td><td class="pts">25</td></tr>
<tr><td><tt>multiply</tt></td><td class="pts">25</td></tr>
</tbody></table>

</p><p>Efficiency is not a requirement for any of the methods. And, you
can use <tt>Math</tt> class methods as needed.

</p><p><font color="red">Note: You will get a zero if you use any other
data structure (e.g. array/arraylist) <em>anywhere</em> in your implementation,
for <em>any</em> reason, even if it has nothing to do with the actual
polynomial operations.  You must work with linked lists ONLY all the
way through. </font>

</p><p>Observe the following rules while working on <tt>Polynomial.java</tt>:

</p><ul>
<li>Only fill in the code in the methods 
<tt>add</tt>, <tt>multiply</tt>, and <tt>evaluate</tt> where indicated. 
</li><li> In methods that return a <tt>Polynomial</tt> (<tt>add</tt> and
<tt>multiply</tt>), the polynomial that is returned must be represented as
described in the "Notes about representation" part of the <b>Background</b> 
section above. <br>
<b>Your method will not get credit</b> if the returned
polynomial does not adhere to this representation, even it is
mathematically correct.<br>
Also see the "Notes about empty (zero) polynomials" at
the end of the <b>Running the program</b> section below.
</li><li> <b>DO NOT</b> remove the import statements at the top of any of the given
classes.
</li><li> <b>DO NOT</b> add any import statements to the original list of
imports in <tt>Polynomial.java</tt>
</li><li> <b>DO NOT</b> change the headers of ANY of the given methods
</li><li> <b>DO NOT</b> change/remove any of the given class fields
</li><li> <b>DO NOT</b> add any new class fields.
</li><li> <b>YOU MAY</b> add new helper methods, but you must 
declare them <b>private</b>.
</li><li>Do not change <tt>Node</tt> and <tt>Term</tt> in any way. You will
not be submitting them, and we will be using the original versions to
test your <tt>Polynomial</tt> implementation.
</li><li>If you wish to change <tt>Polytest</tt>, feel free. You will not
be submitting it, and we will not be using it to grade your 
<tt>Polynomial</tt> submission.
</li></ul>

<p></p><hr>

<p><a name="running"></a></p><h3>Running the program</h3>

There are three sample input files for you to test (they should be 
under the project folder in Eclipse): <br>
<ul>
<li> A file <tt>ptest1.txt</tt> that contains the polynomial
<pre>4x^5 - 2x^3 + 2x + 3</pre>
</li><li> A file <tt>ptest2.txt</tt> that contains the polynomial 
<pre>8x^4 + 4x^3 - 3x + 9</pre>
</li><li> A file <tt>ptest1opp.txt</tt> that contains the polynomial
<pre>-4x^5 + 2x^3 - 2x - 3</pre> (the negation of the polynomial in
<tt>ptest1</tt>)
</li></ul>

<p></p><p>In each of these files, each line is a term, with the first value being the
coefficient, and the second value being the degree. The terms are listed
in <b>descending</b> order of degrees and the respective non-zero coefficients.
Remember that when you store a polynomial in a linked list, you will
store it in <b>ascending</b> order of degrees. (This is actually 
already implemented by the Polynomial constructor when it reads a
polynomial from an input file. All you have to do is make sure you
stick with this rule when you add and multiply.)

</p><p>You may assume that we will NOT test with an invalid polynomial file, i.e.
every test input file will either have at least one
term in the correct format, or will be
empty (see <b>Notes about empty (zero) polynomials</b> below). So you
don't need to check for validity of input.

</p><p>Here's a sample run of the driver, <tt>Polytest</tt>. Apart from
 <tt>ptest1.txt</tt>, <tt>ptest2.txt</tt>, and <tt>ptest1opp.txt</tt>, 
a fourth test polynomial file, <tt>ptestnull.txt</tt> is
 also used. This is an empty file that stands for a null (zero)
 polynomial - you will need to create this yourself. 
See notes after the test run for special instructions
 regarding zero polynomials.

</p><div class="code">
<pre>Enter the name of the polynomial file =&gt; ptest1.txt

4.0x^5 + -2.0x^3 + 2.0x + 3.0


1. ADD polynomial
2. MULTIPLY polynomial
3. EVALUATE polynomial
4. QUIT
        Enter choice # =&gt; 1
Enter the file containing the polynomial to add =&gt; ptest2.txt

8.0x^4 + 4.0x^3 + -3.0x + 9.0

Sum: 4.0x^5 + 8.0x^4 + 2.0x^3 + -1.0x + 12.0


1. ADD polynomial
2. MULTIPLY polynomial
3. EVALUATE polynomial
4. QUIT
        Enter choice # =&gt; 1
Enter the file containing the polynomial to add  =&gt; ptest1opp.txt

-4.0x^5 + 2.0x^3 + -2.0x + -3.0

Sum: 0


1. ADD polynomial
2. MULTIPLY polynomial
3. EVALUATE polynomial
4. QUIT
        Enter choice # =&gt; 1
Enter the file containing the polynomial to add  =&gt; ptestnull.txt

0

Sum: 4.0x^5 + -2.0x^3 + 2.0x + 3.0


1. ADD polynomial
2. MULTIPLY polynomial
3. EVALUATE polynomial
4. QUIT
        Enter choice # =&gt; 2
Enter the file containing the polynomial to multiply  =&gt; ptest2

8.0x^4 + 4.0x^3 + -3.0x + 9.0

Product: 32.0x^9 + 16.0x^8 + -16.0x^7 + -20.0x^6 + 52.0x^5 + 38.0x^4 + -6.0x^3 + -6.0x^2 + 9.0x + 27.0


1. ADD polynomial
2. MULTIPLY polynomial
3. EVALUATE polynomial
4. QUIT
        Enter choice # =&gt; 3
Enter the evaluation point x  =&gt; 2
Value at 2.0: 119.0


1. ADD polynomial
2. MULTIPLY polynomial
3. EVALUATE polynomial
4. QUIT
        Enter choice # =&gt; 4
</pre>
</div>

<p>The sample tests we have given you are
just for starters. You will need to create
other tests of your own on which you can run your code. For every test you
run, be careful to keep your test input in the same format as the test
files provided, otherwise <tt>Polytest</tt> will not work correctly. And make
sure your test file is in the same folder as the other files, i.e. under
<tt>Polynomial</tt>.

</p><p><font color="red">Note on translation from internal to output representation</font>:

</p><p>The <tt>toString</tt> method in the <tt>Polynomial</tt> class returns
a string with the terms in descending order, fit for printing. (It process
the ascending ordered terms of the input linked list in reverse order.)
For illustration, see how the <tt>add</tt> method in 
<tt>Polytest</tt> prints the resulting polynomial:
</p><pre>    System.out.println("Sum: " + Polynomial.toString(Polynomial.add(poly1,poly2)) + "\n");
</pre>

<p></p><p><font color="red">Notes about empty (zero) polynomials</font>:
</p><ul>
<li>If you want to test with an empty polynomial input, you should
create a file with nothing in it. In Eclipse, you can do this by right
clicking on the project name in the package explorer view, then
selecting <b>New</b>,
then selecting <b>File</b>. Give a name, and click <b>Finish</b>. You
new file will show up under the project name folder in the package
explorer view, and the file will be opened in the text editor
view. But don't type anything in the file. 
</li><li>Remember that when you add two terms of the same degree, if you
get a zero coefficient result term, it should not be added to the
result polynomial. As listed in the "Notes about representation" in
the <b>Background</b> section, zero-coefficient terms are not stored.
</li><li>The string representation of a zero polynomial is "0" - see the <tt>toString</tt>
method of the <tt>Polynomial</tt> class. So, the <tt>Polytest</tt>
driver will print a zero for a zero polyomial input, or a zero
polynomial that results from an operation performed on two polynomials.
</li></ul>

<p></p><hr>

<p><a name="submission"></a></p><h3>Submission</h3>

<p>Submit your <b>Polynomial.java</b> source file (NOT Polynomial.class),
in Sakai -&gt; Assignments. <font color="red">Submission of the wrong file will 
result in loss of credit.</font>

</p><p>Refer to the instructions in the <b>Eclipse</b> 
page, under the section <b>The Eclipse Workspace</b> to know how to locate 
<b>Polynomial.java</b> on your computer for uploading.

</p><p></p><hr>

<p><a name="grading"></a></p><h3>Grading Process</h3>

<p>Your submission will be auto-graded by a grading script that will
run several test cases on each of <tt>evaluate</tt>, <tt>add</tt>,
and <tt>multiply</tt>.

</p><p>For each test case, the result
computed by your code will be compared with that computed by our
correct code. Each test case is a unit of partial credit, so credits
for a method are accumulated one test case at a time. There is no
partial credit within a test case: either your program works 
on a test case (full credit for that test case), or it doesn't (no
credit for that test case.)

</p><p>Grading will be done after the submission deadline has passed.  There
is no real time feedback when you submit. You can submit to Sakai up
to 10 times, and each submission will overwrite the previous. This
means the auto-grader will only grade the last submission since that
will be the only submission in Sakai when the deadline has passed.

</p><p>Note that for the <tt>add</tt> and <tt>multiply</tt>
multiply methods, the auto-grader will examine the resulting
linked list, NOT printed output. (The auto-grader does NOT use
<tt>Polytest</tt> at all - that is just for your use.)  In other
words, the grading script will compare the linked list structure of
the correct result with the linked list structure in your
implementation. For <tt>evaluate</tt>, the returned float value
will be checked.

</p><p>If you call the <tt>add</tt> method in your <tt>multiply</tt>
implementation, be aware that if your <tt>add</tt> implementation does
not work correctly, your <tt>multiply</tt> method's correctness will
be adversely impacted as well, and you will lose credit for it as
well for the failed test cases.

</p><p>All printed output will be ignored. This also
means if you threw in print statements for debugging and left them in
your code, they will have no bearing on the grading.

</p><p>When grading is done, your grade report will be emailed to your
Rutgers address.  Test cases will be posted so you can run your
program against them to cross-check against the grade report.
Remember, verification means checking the contents of the
linked list for <tt>add</tt> and <tt>multiply</tt>, and the
return value of <tt>evaluate</tt> -- NOT what your
program might print.

</p>
</body></html>